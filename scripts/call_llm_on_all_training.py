#!/usr/bin/python3

import os
import time

import openai
import pandas as pd

openai.api_key = os.environ["OPENAI_API_KEY"]


def extract_python_code(text):
    output = ""
    grabbing = False
    for line in text.splitlines():
        if line == "```":
            break
        elif grabbing and line:
            output += line + "\n"
        elif line in [
            "```Python",
            "```python",
            "```python3",
            "```py",
            "```py3",
            "```Python3",
        ]:
            grabbing = True
        elif line:
            output += "# " + line + "\n"
        else:
            output += "\n"

    # If we never saw ```python then assume all of it is code
    if not grabbing:
        return text

    return output


fake_name = "FormalVerificationLibrary"

prompt_prefix = f"""
{fake_name} is a new Python API for the formal modeling
and verification of transition systems (modules) and sequential code
(procedures). The API does not use inheritance so you must avoid extending
class. Please write Python code using the {fake_name} API that fits the
description below.\n\n
"""


def gpt4_write_code(prompt, engine="gpt-4-0613"):
    prompt = prompt_prefix + prompt
    response = openai.ChatCompletion.create(
        model=engine, messages=[{"role": "user", "content": prompt}]
    )
    code = extract_python_code(response["choices"][0]["message"]["content"])
    comment = (
        f"# Code generated by {engine}. \n\n# " + prompt.replace("\n", "\n# ") + "\n\n"
    )
    code = comment + "\n" + code
    return code


if __name__ == "__main__":
    # load data/train.csv
    train_set = pd.read_csv("data/train.csv")
    # for each row in train_set
    for i, row in train_set.iterrows():
        f = row["filename"]
        # find the line in f that contains "Description:"
        # extract the description
        with open("data/" + f) as input_file:
            lines = input_file.readlines()
            description = ""
            for i, l in enumerate(lines):
                if "Description:" in l:
                    # find the end of "Description:" in l
                    end = l.find("Description:") + len("Description:")
                    # extract the description
                    description = l[end:].strip()
                    break
            assert description, "Description not found in " + f

        code = gpt4_write_code(description)
        with open(f"data/{f}.output.2.py", "w") as output_file:
            output_file.write(code)

        # wait a minute
        print("Waiting...")
        time.sleep(60)
