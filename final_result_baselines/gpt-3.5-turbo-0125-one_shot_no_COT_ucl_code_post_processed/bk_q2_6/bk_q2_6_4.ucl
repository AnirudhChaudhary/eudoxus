uclid
module Stack(n: int)
{
  const capacity: int = n;
  type stack_t: record {
    size: int;
    elems: array [int] of int;
  };

  var s: stack_t;

  procedure push(e: int)
    requires s.size < capacity;
    modifies s;
  {
    s.size := s.size + 1;
    s.elems[s.size] := e;
  }

  procedure pop()
    requires s.size > 0;
    modifies s;
  {
    s.size := s.size - 1;
  }

  function top(): int
    requires s.size > 0;
  {
    return s.elems[s.size];
  }

  init {
    s.size := 0;
  }

  transition {
    if (s.size < capacity) {
      havoc e: int;
      push(e);
    } else {
      pop();
    }
  }
}


This Uclid5 code models a stack with a specified capacity `n` that supports the push, pop, and top operations. The stack is represented as a record with a size indicating the number of elements currently in the stack and an array to store the elements. The push operation increases the size and adds an element to the stack, the pop operation decreases the size, and the top operation returns the top element of the stack. The transition system alternates between pushing a random element if the stack is not at capacity and popping an element if the stack is full.
