system :: You are an expert in program verification (hoare logic style). You are an expert user of UCLID5 which is a state transition modeling language. You will be given a description of a task and asked to write code.
====================
user :: Please write code in Uclid5 to model the following description:

  This UCLID5 model, inspired by Lee & Seshia's "Introduction to Embedded Systems," simulates interactions between processes to evaluate confidentiality through non-interference simulations. It features two modules, `process1` and `process2`, each handling inputs and outputs differently based on internal states and external inputs. `process1` uses a simple state and toggles its output based on the negation of a public input, while `process2` incorporates a more complex state transition system that toggles outputs based on both secret and public inputs. The main module orchestrates interactions between instances of these processes under controlled conditions, ensuring that the output remains consistent across different runs despite variations in secret inputs. This setup is used for bounded model checking to analyze potential security vulnerabilities or to demonstrate non-interference, with functionalities to unroll process behaviors up to five times and print counterexamples for detailed analysis.


====================
assistant :: Certainly!
  ```

  /*
  * Based on an example from Lee & Seshia, "Introduction to Embedded Systems", Chapter 17 on Security
  */
  module process1
  {
    type pc_t = enum { A };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    init {
      pc = A;
      z = false;
    }

    next {
      z' = !x;
    }

  }

  module process2
  {
    type pc_t = enum { B, C };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    procedure next_state()
      modifies z;
      modifies pc;
    {
      case
        (pc == B) && s && !x : { pc = C; z = true; }
        (pc == C) && s && !x : { pc = B; z = false; }
      esac
    }

    init {
      pc = B;
      z = false;
    }

    next {
      call next_state();
    }
  }


  module main
  {
    type t1pc_t = process1.pc_t;
    type t2pc_t = process2.pc_t;

    var x1,x2 : boolean;
    var s1,s2 : boolean;
    var z1,z2 : boolean;

  /*
    instance p11 : process1(z: (z1), s : (s1), x : (x1));
    instance p12 : process1(z: (z2), s : (s2), x : (x2));
  */

  /*
  */
    instance p21 : process2(z: (z1), s : (s1), x : (x1));
    instance p22 : process2(z: (z2), s : (s2), x : (x2));

    init {
      havoc x1; havoc x2;
      havoc s1; havoc s2;
      assume(x1 == x2);
    }

    next {
      havoc x1; havoc x2;
      havoc s1; havoc s2;
      assume(x1' == x2');
      // next(p11); next(p12);
      next(p21); next(p22);
    }

    invariant same_output_z : (z1 == z2);


    control {
      // *** BASIC ASSERTIONS/INVARIANT
  /*
  */
      v = unroll(5);
      check;
      print_results;
      //v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
      v.print_cex(x1,x2,s1,s2,z1,z2,p21.pc,p22.pc);

  /*
      // *** INDUCTION
      v = induction(1);
      check;
      print_results;
      v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
  */
    }
  }

  ```

====================
user :: Please write code in Uclid5 to model the following description:
  Model a thermostat that controls a heater. The heater has two states: on and off.

In the initial state, if the temperature is less than or equal to 20 degrees Celsius, it turns the heater on, and leaves it on for at least 30 seconds. After that, if the temperature is greater than 20 degrees, it turns the heater off and leaves it off for at least 2 minutes. It turns it on again only if the temperature is less than or equal to 20 degrees.

Model a system that behaves as described above, assuming it reacts exactly only once every 30 seconds.

Use the variable names temp, heatOn, heatOff and time.

====================
assistant :: Certainly! Below is the Uclid5 code that models the thermostat controlling a heater based on the provided description:

```c
module thermostat {
    var temp : int; // temperature in degrees Celsius
    var heatOn : bool; // heater state: on (true) or off (false)
    var heatOff : bool; // heater state: on (true) or off (false)
    var time : int; // time in seconds

    init {
        temp = 15; // initial temperature
        heatOn = false; // initial heater state
        heatOff = true; // initial heater state
        time = 0; // initial time
    }

    transition {
        // Turn on heater if temperature is less than or equal to 20 degrees
        if (temp <= 20) {
            heatOn' = true;
            heatOff' = false;
            time' = time + 30; // Set timer for 30 seconds
        }
        // Turn off heater if temperature is greater than 20 degrees
        else if (temp > 20) {
            heatOn' = false;
            heatOff' = true;
            time' = time + 120; // Set timer for 2 minutes
        }

        // Reset heater states based on time elapsed
        if (heatOn && time >= 30) {
            heatOn' = false;
            heatOff' = true;
            time' = 0; // Reset time
        } else if (heatOff && time >= 120) {
            heatOn' = false;
            heatOff' = false;
            time' = 0; // Reset time
        }

        // Update temperature (for demonstration purposes)
        temp' = temp + 1; // Increase temperature by 1 degree every transition
    }
}

module main {
    instance t : thermostat;

    init {
        // Initial conditions for the thermostat
        t.temp = 15;
        t.heatOn = false;
        t.heatOff = true;
        t.time = 0;
    }

    next {
        // Transition the thermostat model
        next(t);
    }
}
```

This Uclid5 model simulates the behavior of a thermostat controlling a heater according to the specified requirements. The model initializes the temperature, heater states, and time, and then transitions based on the temperature conditions and time elapsed. The heater is turned on/off based on the temperature thresholds and time constraints, ensuring that it reacts exactly once every 30 seconds.
====================
