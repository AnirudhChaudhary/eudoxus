system :: You are an expert in program verification (hoare logic style). You are an expert user of UCLID5 which is a state transition modeling language. You will be given a description of a task and asked to write code.
====================
user :: Please write code in Uclid5 to model the following description:

  This UCLID5 model, inspired by Lee & Seshia's "Introduction to Embedded Systems," simulates interactions between processes to evaluate confidentiality through non-interference simulations. It features two modules, `process1` and `process2`, each handling inputs and outputs differently based on internal states and external inputs. `process1` uses a simple state and toggles its output based on the negation of a public input, while `process2` incorporates a more complex state transition system that toggles outputs based on both secret and public inputs. The main module orchestrates interactions between instances of these processes under controlled conditions, ensuring that the output remains consistent across different runs despite variations in secret inputs. This setup is used for bounded model checking to analyze potential security vulnerabilities or to demonstrate non-interference, with functionalities to unroll process behaviors up to five times and print counterexamples for detailed analysis.


====================
assistant :: Certainly!
  ```

  /*
  * Based on an example from Lee & Seshia, "Introduction to Embedded Systems", Chapter 17 on Security
  */
  module process1
  {
    type pc_t = enum { A };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    init {
      pc = A;
      z = false;
    }

    next {
      z' = !x;
    }

  }

  module process2
  {
    type pc_t = enum { B, C };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    procedure next_state()
      modifies z;
      modifies pc;
    {
      case
        (pc == B) && s && !x : { pc = C; z = true; }
        (pc == C) && s && !x : { pc = B; z = false; }
      esac
    }

    init {
      pc = B;
      z = false;
    }

    next {
      call next_state();
    }
  }


  module main
  {
    type t1pc_t = process1.pc_t;
    type t2pc_t = process2.pc_t;

    var x1,x2 : boolean;
    var s1,s2 : boolean;
    var z1,z2 : boolean;

  /*
    instance p11 : process1(z: (z1), s : (s1), x : (x1));
    instance p12 : process1(z: (z2), s : (s2), x : (x2));
  */

  /*
  */
    instance p21 : process2(z: (z1), s : (s1), x : (x1));
    instance p22 : process2(z: (z2), s : (s2), x : (x2));

    init {
      havoc x1; havoc x2;
      havoc s1; havoc s2;
      assume(x1 == x2);
    }

    next {
      havoc x1; havoc x2;
      havoc s1; havoc s2;
      assume(x1' == x2');
      // next(p11); next(p12);
      next(p21); next(p22);
    }

    invariant same_output_z : (z1 == z2);


    control {
      // *** BASIC ASSERTIONS/INVARIANT
  /*
  */
      v = unroll(5);
      check;
      print_results;
      //v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
      v.print_cex(x1,x2,s1,s2,z1,z2,p21.pc,p22.pc);

  /*
      // *** INDUCTION
      v = induction(1);
      check;
      print_results;
      v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
  */
    }
  }

  ```

====================
user :: Please write code in Uclid5 to model the following description:
  Model the following feature for an automobile:

A dome light that is turned on as soon as any door is opened. It stays on for 30 seconds after all doors are shut.

Use the variable names light_on, door_open, time

====================
assistant :: Sure! Here is the Uclid5 code to model the described feature for an automobile:

```c
module automobile {
  var light_on : boolean;
  var door_open : boolean;
  var time : int;

  init {
    light_on = false;
    door_open = false;
    time = 0;
  }

  next {
    if (door_open) {
      light_on' = true;
      time' = 0;
    } else {
      if (time < 30) {
        light_on' = light_on;
        time' = time + 1;
      } else {
        light_on' = false;
        time' = 0;
      }
    }
  }

  transition {
    door_open' = (any i : int :: 0 <= i < N :: door_open[i]);
  }
}

module main {
  const N : int;
  var door_open : array[N] boolean;

  instance auto : automobile(light_on, door_open[0], time);

  init {
    door_open[0] = false;
    door_open[1] = false;
    // Initialize other door_open values as needed
  }

  next {
    door_open[0]' = ...; // Update door_open values based on external inputs
    door_open[1]' = ...;
    // Update other door_open values as needed
  }
}
```

In this Uclid5 model, the `automobile` module represents the dome light feature in the automobile. The `light_on` variable indicates whether the dome light is on or off, `door_open` represents whether any door is open, and `time` tracks the duration the dome light has been on.

The `main` module initializes the door_open array and updates the door_open values based on external inputs. The `automobile` module controls the behavior of the dome light based on the door_open status and the elapsed time, as described in the feature requirements.
====================
