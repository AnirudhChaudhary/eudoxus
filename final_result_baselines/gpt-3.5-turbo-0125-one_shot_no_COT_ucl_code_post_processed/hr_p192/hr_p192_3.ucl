uclid
module main {
    var request : boolean;
    type status_t = enum { ready, busy };
    var status : status_t;

    init {
        // Initial state
        status = ready;
    }

    next {
        // Transition rules
        if (request) {
            status' = busy;
        } else {
            // status remains the same if request is false
            status' = status;
        }
    }

    // Property to check if, when request is true, status eventually becomes busy
    invariant request_true_implies_status_busy {
        request ==> (status == busy || next(status) == busy);
    }
}


In this code snippet, the `main` module models the program with variables `request` and `status`. The `init` block initializes the `status` variable to `ready`. The `next` block defines the transition rules where `status` becomes `busy` if `request` is true, otherwise it remains the same. The `invariant` named `request_true_implies_status_busy` checks that if `request` is true, then eventually `status` becomes `busy` either in the current state or the next state.
