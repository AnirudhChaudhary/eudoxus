uclid
module vending_machine
{
  type state_t = enum { pay, select, soda, beer };

  var state : state_t;
  var coin_inserted : boolean;

  init {
    state = pay;
    coin_inserted = false;
  }

  transition {
    // User actions
    rule insert_coin {
      state == pay && !coin_inserted ==> {
        coin_inserted := true;
      }
    }

    // Machine actions
    rule get_soda {
      state == select && coin_inserted && coin_inserted := false;
    }

    rule get_beer {
      state == select && coin_inserted && coin_inserted := false;
    }
  }

  ltl property drink_after_coin {
    always (state != soda && state != beer) | coin_inserted;
  }
}



This code models a vending machine with states pay, select, soda, and beer. The machine transitions between these states based on user actions (insert_coin) and machine actions (get_soda, get_beer). The LTL property `drink_after_coin` ensures that a drink is only delivered after a coin has been inserted.
