c
module main {
    var x: int;

    procedure Inc()
    {
        while (true) {
            if (x < 200) {
                x := x + 1;
            }
        }
    }

    procedure Dec()
    {
        while (true) {
            if (x > 0) {
                x := x - 1;
            }
        }
    }

    procedure Reset()
    {
        while (true) {
            if (x == 200) {
                x := 0;
            }
        }
    }

    process P1 = Inc();
    process P2 = Dec();
    process P3 = Reset();

    invariant bounds: 0 <= x && x <= 200;
}


In this code snippet, we have defined the three processes `Inc`, `Dec`, and `Reset` as procedures. Each process runs an infinite loop, checking the condition specified in the description and updating the shared variable `x` accordingly. The `process` statements instantiate these procedures as concurrent processes.

The invariant `bounds` checks that the value of `x` is always between 0 and 200 (inclusive) throughout the execution of the concurrent program.

This Uclid5 model captures the behavior of the concurrent program with the three processes and ensures the desired property regarding the variable `x`.
