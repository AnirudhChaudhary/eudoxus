system :: You're an expert in writing uclid5 models.You will be given a docstring and asked to write a model. Remember uclid5 is a state machine language and has it's own specific syntax.
====================
user :: Write a uclid5 model for the following description:

This UCLID5 model, inspired by Lee & Seshia's "Introduction to Embedded Systems," simulates interactions between processes to evaluate confidentiality through non-interference simulations. It features two modules, `process1` and `process2`, each handling inputs and outputs differently based on internal states and external inputs. `process1` uses a simple state and toggles its output based on the negation of a public input, while `process2` incorporates a more complex state transition system that toggles outputs based on both secret and public inputs. The main module orchestrates interactions between instances of these processes under controlled conditions, ensuring that the output remains consistent across different runs despite variations in secret inputs. This setup is used for bounded model checking to analyze potential security vulnerabilities or to demonstrate non-interference, with functionalities to unroll process behaviors up to five times and print counterexamples for detailed analysis.

====================
assistant :: module process1
{
  type pc_t = enum { A };

  var pc : pc_t;
  input s : boolean; // secret input
  input x : boolean; // public input
  output z: boolean; // public output

  init {
    pc = A;
    z = false;
  }

  next {
    z' = !x;
  }

}

module process2
{
  type pc_t = enum { B, C };

  var pc : pc_t;
  input s : boolean; // secret input
  input x : boolean; // public input
  output z: boolean; // public output

  procedure next_state()
    modifies z;
    modifies pc;
  {
    case
      (pc == B) && s && !x : { pc = C; z = true; }
      (pc == C) && s && !x : { pc = B; z = false; }
    esac
  }

  init {
    pc = B;
    z = false;
  }

  next {
    call next_state();
  }
}


module main
{
  type t1pc_t = process1.pc_t;
  type t2pc_t = process2.pc_t;

  var x1,x2 : boolean;
  var s1,s2 : boolean;
  var z1,z2 : boolean;

/*
  instance p11 : process1(z: (z1), s : (s1), x : (x1));
  instance p12 : process1(z: (z2), s : (s2), x : (x2));
*/

/*
*/
  instance p21 : process2(z: (z1), s : (s1), x : (x1));
  instance p22 : process2(z: (z2), s : (s2), x : (x2));

  init {
    havoc x1; havoc x2;
    havoc s1; havoc s2;
    assume(x1 == x2);
  }

  next {
    havoc x1; havoc x2;
    havoc s1; havoc s2;
    assume(x1' == x2');
    // next(p11); next(p12);
    next(p21); next(p22);
  }

  invariant same_output_z : (z1 == z2);


  control {
    // *** BASIC ASSERTIONS/INVARIANT
/*
*/
    v = unroll(5);
    check;
    print_results;
    //v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
    v.print_cex(x1,x2,s1,s2,z1,z2,p21.pc,p22.pc);

/*
    // *** INDUCTION
    v = induction(1);
    check;
    print_results;
    v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
*/
  }
}
====================
user :: Write a uclid5 model for the following description:
Consider the intersection of two one-way streets, called Main and Secondary.
A light on each street controls its traffic. Each light goes through a cycle consisting of a red (R), green (G), and yellow (Y) phases.

It is a safety requirement that when one light is in its green or yellow phase, the other is in its red phase. The yellow phase is always 5 seconds long.

The traffic lights operate as follows.
A sensor in the secondary road detects a vehicle. While no vehicle is detected, there is a 4 minute-long cycle with the main light having 3 minutes of green, 5 seconds of yellow, and 55 seconds of red. The secondary light is red for 3 minutes and 5 seconds (while the main light is green and yellow), green for 50 seconds, then yellow for 5 seconds.

If a vehicle is detected on the secondary road, the traffic light quickly gives a right of way to the secondary road. When this happens, the main light aborts its green phase and immediately switches to its 5 second yellow phase. If the vehicle is detected while the main light is yellow or red, the system continues as if there were no vehicle.

Model a system that controls the lights. Let this system have six pure outputs, one for each light, named mG, mY, and mR, to designate the main light being green, yellow, or red, respectively, and sG, sY, and sR, to designate the secondary light being green, yellow, or red, respectively. These signals should be generated to turn on a light. You can implicitly assume that when one light is turned on, whichever has been on is turned off.

Use the variable names mG, mY, mR, sG, sY, sR.

====================
assistant :: module traffic_light
{
  type phase_t = enum { R, G, Y };

  var main_phase : phase_t;
  var sec_phase : phase_t;
  var sec_vehicle : boolean;

  output mG, mY, mR : boolean;
  output sG, sY, sR : boolean;

  init {
    main_phase = G;
    sec_phase = R;
    sec_vehicle = false;
  }

  next {
    case
      (sec_vehicle && sec_phase == R) : {
        mG = false;
        mY = true;
        mR = false;
        sG = false;
        sY = false;
        sR = true;
      }
      (sec_vehicle && sec_phase == G) : {
        mG = false;
        mY = true;
        mR = false;
        sG = false;
        sY = false;
        sR = true;
      }
      (sec_vehicle && sec_phase == Y) : {
        mG = false;
        mY = true;
        mR = false;
        sG = false;
        sY = false;
        sR = true;
      }
      (!sec_vehicle && main_phase == G) : {
        mG = true;
        mY = false;
        mR = false;
        sG = false;
        sY = false;
        sR = true;
      }
      (!sec_vehicle && main_phase == Y) : {
        mG = false;
        mY = false;
        mR = true;
        sG = false;
        sY = false;
        sR = true;
      }
      (!sec_vehicle && main_phase == R) : {
        mG = false;
        mY = false;
        mR = true;
        sG = false;
        sY = false;
        sR = true;
      }
    esac
  }
}

====================
