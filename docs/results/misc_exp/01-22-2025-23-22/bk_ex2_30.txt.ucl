module Train {
  var action: enum { aise, approach, entered, exit, far, in, ller_approach, ller_exit, ller_lower_gate, ller_raise_gate, near, ower, own, p };
  var state: enum { aise, approach, entered, exit, far, in, ller_approach, ller_exit, ller_lower_gate, ller_raise_gate, near, ower, own, p };

  next {
    if ((action == approach) && (state == far)) {
      state' = near;
    } else {
      if ((action == entered) && (state == near)) {
        state' = in;
      } else {
        if ((action == exit) && (state == in)) {
          state' = far;
        }
      }
    }

  }
}
module Gate {
  var action: enum { _approach, _entered, _exit, _far, _in, _near, down, lower, oller_approach, oller_exit, oller_lower_gate, oller_raise_gate, raise, up };
  var state: enum { down, up };

  next {
    if ((action == lower) && (state == up)) {
      state' = down;
    } else {
      if ((action == raise) && (state == down)) {
        state' = up;
      }
    }

  }
}
module Controller {
  var action: enum { , ach, approach, ed, exit, lower_gate, raise_gate };
  var state: integer;

  next {
    if ((action == approach) && (state == 0)) {
      state' = 1;
    } else {
      if ((action == lower_gate) && (state == 1)) {
        state' = 2;
      } else {
        if ((action == exit) && (state == 2)) {
          state' = 3;
        } else {
          if ((action == raise_gate) && (state == 3)) {
            state' = 0;
          }
        }
      }
    }

  }
}
