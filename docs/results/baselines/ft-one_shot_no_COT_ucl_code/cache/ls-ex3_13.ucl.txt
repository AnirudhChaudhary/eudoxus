system :: You're an expert in writing uclid5 models.You will be given a docstring and asked to write a model. Remember uclid5 is a state machine language and has it's own specific syntax.
====================
user :: Write a uclid5 model for the following description:

This UCLID5 model, inspired by Lee & Seshia's "Introduction to Embedded Systems," simulates interactions between processes to evaluate confidentiality through non-interference simulations. It features two modules, `process1` and `process2`, each handling inputs and outputs differently based on internal states and external inputs. `process1` uses a simple state and toggles its output based on the negation of a public input, while `process2` incorporates a more complex state transition system that toggles outputs based on both secret and public inputs. The main module orchestrates interactions between instances of these processes under controlled conditions, ensuring that the output remains consistent across different runs despite variations in secret inputs. This setup is used for bounded model checking to analyze potential security vulnerabilities or to demonstrate non-interference, with functionalities to unroll process behaviors up to five times and print counterexamples for detailed analysis.

====================
assistant :: module process1
{
  type pc_t = enum { A };

  var pc : pc_t;
  input s : boolean; // secret input
  input x : boolean; // public input
  output z: boolean; // public output

  init {
    pc = A;
    z = false;
  }

  next {
    z' = !x;
  }

}

module process2
{
  type pc_t = enum { B, C };

  var pc : pc_t;
  input s : boolean; // secret input
  input x : boolean; // public input
  output z: boolean; // public output

  procedure next_state()
    modifies z;
    modifies pc;
  {
    case
      (pc == B) && s && !x : { pc = C; z = true; }
      (pc == C) && s && !x : { pc = B; z = false; }
    esac
  }

  init {
    pc = B;
    z = false;
  }

  next {
    call next_state();
  }
}


module main
{
  type t1pc_t = process1.pc_t;
  type t2pc_t = process2.pc_t;

  var x1,x2 : boolean;
  var s1,s2 : boolean;
  var z1,z2 : boolean;

/*
  instance p11 : process1(z: (z1), s : (s1), x : (x1));
  instance p12 : process1(z: (z2), s : (s2), x : (x2));
*/

/*
*/
  instance p21 : process2(z: (z1), s : (s1), x : (x1));
  instance p22 : process2(z: (z2), s : (s2), x : (x2));

  init {
    havoc x1; havoc x2;
    havoc s1; havoc s2;
    assume(x1 == x2);
  }

  next {
    havoc x1; havoc x2;
    havoc s1; havoc s2;
    assume(x1' == x2');
    // next(p11); next(p12);
    next(p21); next(p22);
  }

  invariant same_output_z : (z1 == z2);


  control {
    // *** BASIC ASSERTIONS/INVARIANT
/*
*/
    v = unroll(5);
    check;
    print_results;
    //v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
    v.print_cex(x1,x2,s1,s2,z1,z2,p21.pc,p22.pc);

/*
    // *** INDUCTION
    v = induction(1);
    check;
    print_results;
    v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
*/
  }
}
====================
user :: Write a uclid5 model for the following description:
Model a state machine describing a traffic light at a pedestrian crosswalk. This is a time triggered machine that assumes it will react once per second. It starts in the red state and counts 60 seconds with the help of the variable count. It then transitions to green, where it will remain until the pure input pedestrian is present. That input is generated by some other subsystem that detects when a pedestrian is present, and should be modelled as nondeterministic. When pedestrian is present, the machine transitions to yellow if it has been in state green for at least 60 seconds. Otherwise, it transitions to pending, where it stays for the remainder of the 60 second interval. This ensures that once the light goes green, it stays green for at least 60 seconds. At the end of 60 seconds, it will transition to yellow, where it will remain for 5 seconds before transitioning back to red.

The outputs produced by this machine are sigG to turn on the green light, sigY to change the light to yellow, and sigR to change the light to red.

Use the variable names count, pedestrian, siG, sigY, sigR.

====================
assistant :: module traffic_light
{
  type state_t = enum { RED, GREEN, YELLOW, PENDING };

  var state : state_t;
  var count : integer;
  input pedestrian : boolean;
  output sigG, sigY, sigR : boolean;

  init {
    state = RED;
    count = 0;
    sigG = false;
    sigY = false;
    sigR = true;
  }

  next {
    count' = count + 1;
    case
      (state == RED) && (count == 60) : { state' = GREEN; count' = 0; }
      (state == GREEN) && (pedestrian) : { state' = YELLOW; count' = 0; }
      (state == GREEN) && (count == 60) : { state' = PENDING; count' = 0; }
      (state == PENDING) && (count == 60) : { state' = YELLOW; count' = 0; }
      (state == YELLOW) && (count == 5) : { state' = RED; count' = 0; }
    esac
    sigG' = (state == GREEN);
    sigY' = (state == YELLOW);
    sigR' = (state == RED);
  }
}

====================
