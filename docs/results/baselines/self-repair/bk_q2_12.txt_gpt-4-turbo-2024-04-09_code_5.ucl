
module main {

  type pid_t = int;
  type msg_t = int;

  const n : pid_t;

  record process_state_t {
    id : pid_t;
    channel : array [pid_t] of msg_t;
    leader : boolean;
  }

  var processes : array [pid_t] of process_state_t;

  init {
    for pid : pid_t :: processes[pid].id = pid;
    for pid : pid_t :: processes[pid].leader = false;
    for pid : pid_t :: for other_pid : pid_t :: processes[pid].channel[other_pid] = 0; // Initializing channel
  }

  define next_pid(pid: pid_t) : pid_t {
    return (pid % n) + 1;
  }

  procedure send_msg(src_pid : pid_t, msg : msg_t)
  {
    processes[next_pid(src_pid)].channel[src_pid] = msg;
  }

  function receive_msg(pid : pid_t) returns (msg_t)
  {
    return processes[pid].channel[pid];
  }

  procedure process_action(pid : pid_t)
  {
    var m : msg_t;
    m = receive_msg(pid);
    if (m == processes[pid].id) {
      processes[pid].leader = true;
    } else if (m > processes[pid].id) {
      send_msg(pid, m);
    }
  }

  next {
    for pid : pid_t :: process_action(pid);
  }

  control {
    init;
    while (true) {
      next;
    }
  }
}