module main {
    type state_t = enum { THINKING, WAITING, EATING };
    type chopstick_t = enum { AVAILABLE, IN_USE };

    var phil1, phil2, phil3, phil4, phil5 : state_t;
    var chopstick1, chopstick2, chopstick3, chopstick4, chopstick5 : chopstick_t;

    init {
        phil1 = THINKING; phil2 = THINKING; phil3 = THINKING; phil4 = THINKING; phil5 = THINKING;
        chopstick1 = AVAILABLE; chopstick2 = AVAILABLE; chopstick3 = AVAILABLE; chopstick4 = AVAILABLE; chopstick5 = AVAILABLE;
    }

    next {
        if (phil1 == THINKING && chopstick1 == AVAILABLE && chopstick5 == AVAILABLE) {
            phil1' = EATING;
            chopstick1' = IN_USE;
            chopstick5' = IN_USE;
        } else if (phil1 == EATING) {
            phil1' = THINKING;
            chopstick1' = AVAILABLE;
            chopstick5' = AVAILABLE;
        } else {
            phil1' = phil1;
        }
        // Similar transition rules for other philosophers...

        // This is a simplified version; you should include transitions for WAITING state and handle all philosophers.
    }

    invariant no_two_adjacent_eating :
        !(phil1 == EATING && phil2 == EATING) &&
        !(phil2 == EATING && phil3 == EATING) &&
        !(phil3 == EATING && phil4 == EATING) &&
        !(phil4 == EATING && phil5 == EATING) &&
        !(phil5 == EATING && phil1 == EATING);

    invariant no_deadlock :
        !(phil1 == WAITING && phil2 == WAITING && phil3 == WAITING && phil4 == WAITING && phil5 == WAITING &&
          chopstick1 == AVAILABLE && chopstick2 == AVAILABLE && chopstick3 == AVAILABLE && chopstick4 == AVAILABLE && chopstick5 == AVAILABLE);

    control {
        v = unroll(10);
        check;
        print_results;
    }
}
