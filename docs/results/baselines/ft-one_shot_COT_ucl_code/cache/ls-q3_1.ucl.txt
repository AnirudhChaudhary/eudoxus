system :: You're an expert in writing uclid5 models.You will be given a docstring and asked to write a model. Remember uclid5 is a state machine language and has it's own specific syntax.
====================
user :: Write a uclid5 model for the following description:
    This UCLID5 model simulates a process interaction environment to evaluate confidentiality properties through non-interference simulations, inspired by an example in Chapter 17 on Security from "Introduction to Embedded Systems" by Lee & Seshia. The model consists of two types of process modules (`process1` and `process2`) and a main module that orchestrates the interaction between instances of these processes.

    Process Modules:
    1. `process1`: This module captures a simplified process that reflects non-deterministic behavior based on public input. It uses an enumerated type `pc_t` with a single state `A`. It has:
        - Inputs:
        * `s`: A boolean representing a secret input.
        * `x`: A boolean representing a public input.
        - Output:
        * `z`: A boolean public output that toggles based on the inverse of input `x`.
        - Behavior:
        * The process starts in state `A` and outputs `z` as `false` initially.
        * In subsequent cycles, the output `z` becomes the negation of `x`.

    2. `process2`: This module is a more complex process with an internal state machine described using state enum `pc_t` with states `B` and `C`. It demonstrates state-dependent output behavior.
        - Inputs are the same as in `process1`.
        - Output and state transitions:
        * The process starts in state `B` with the output `z` as `false`.
        * Based on the input combination (state, `s`, and `x`), the process transitions between states `B` and `C`, toggling the output `z`.
        * The transitions are specifically:
            - From `B` to `C` (output `z` is set to `true`) when `s` is true and `x` is false.
            - From `C` back to `B` (output `z` is reset to `false`) under the same input conditions.

    Main Module:
    - Sets up instances of `process2` (`p21` and `p22`) to interact under controlled input conditions.
    - Inputs `x1`, `x2` (public), and `s1`, `s2` (secret) are used for driving the process instances.
    - Controls non-determinism by initially assuming both `x1` and `x2` are equal, and it maintains this assumption in all subsequent states.
    - Evaluates confidentiality by asserting the invariant `same_output_z`, ensuring that outputs `z1` and `z2` of both process instances are always equal, thereby checking for consistent behavior across different runs with potentially varying secret inputs.

    Control:
    - The control block is used to perform bounded model checking and to produce counterexamples. It specifies that up to 5 unrolling should be checked.
    - The `print_cex` function is used for displaying counterexamples for the states of inputs and outputs along with the internal state of `process2` instances (`p21` and `p22`).

    This model is particularly useful for demonstrating the effects of secret data manipulations on the outputs, which can be analyzed to study security vulnerability or proof of non-interference in systems.

====================
assistant :: module process1
    {
    type pc_t = enum { A };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    init {
        pc = A;
        z = false;
    }

    next {
        z' = !x;
    }

    }

    module process2
    {
    type pc_t = enum { B, C };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    procedure next_state()
        modifies z;
        modifies pc;
    {
        case
        (pc == B) && s && !x : { pc = C; z = true; }
        (pc == C) && s && !x : { pc = B; z = false; }
        esac
    }

    init {
        pc = B;
        z = false;
    }

    next {
        call next_state();
    }
    }


    module main
    {
    type t1pc_t = process1.pc_t;
    type t2pc_t = process2.pc_t;

    var x1,x2 : boolean;
    var s1,s2 : boolean;
    var z1,z2 : boolean;

    /*
    instance p11 : process1(z: (z1), s : (s1), x : (x1));
    instance p12 : process1(z: (z2), s : (s2), x : (x2));
    */

    /*
    */
    instance p21 : process2(z: (z1), s : (s1), x : (x1));
    instance p22 : process2(z: (z2), s : (s2), x : (x2));

    init {
        havoc x1; havoc x2;
        havoc s1; havoc s2;
        assume(x1 == x2);
    }

    next {
        havoc x1; havoc x2;
        havoc s1; havoc s2;
        assume(x1' == x2');
        // next(p11); next(p12);
        next(p21); next(p22);
    }

    invariant same_output_z : (z1 == z2);


    control {
        // *** BASIC ASSERTIONS/INVARIANT
    /*
    */
        v = unroll(5);
        check;
        print_results;
        //v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
        v.print_cex(x1,x2,s1,s2,z1,z2,p21.pc,p22.pc);

    /*
        // *** INDUCTION
        v = induction(1);
        check;
        print_results;
        v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
    */
    }
    }
====================
user :: Write a uclid5 model for the following description:
To model an event counter in UCLID5 that counts the number of times the temperature (`temp`) rises above a certain threshold in a weather station, we need to define the state, the initialization, the state transition, and the properties to verify. Here's an outline for the UCLID5 model:

--OUTLINE--

1. **Model Definition:**
   - The model will include variables for temperature (`temp`) and the counter (`count`).
   - There will be a threshold constant (`THRESHOLD`) that defines the temperature above which the counter increments.

2. **State Variables:**
   - `temp`: An integer variable representing the current temperature.
   - `count`: An integer variable that counts the number of times the temperature has exceeded the threshold.

3. **Constants:**
   - `THRESHOLD`: An integer constant representing the threshold temperature.

4. **Initialization:**
   - Set the initial value of `temp` to a realistic starting temperature.
   - Initialize `count` to zero.

5. **State Transition:**
   - Define a transition relation that describes how `temp` and `count` change:
     - `temp` can change non-deterministically to any value within a realistic range for each step.
     - `count` increments by 1 if the new value of `temp` exceeds `THRESHOLD` and the previous value did not. Otherwise, `count` remains the same.

6. **Properties to Verify:**
   - Correctness of the counter: Verify that `count` accurately reflects the number of times `temp` has exceeded the threshold.
   - Check properties like whether `count` can decrease (it should not).

7. **Bounded Model Checking:**
   - Set up a bounded model checking scenario to test the model up to a certain number of steps.
   - Use assertions to ensure that `count` never decrements.

8. **Synthesis and Simulation:**
   - Use UCLID5's capabilities to simulate the model for different temperature sequences to observe the behavior of the counter.

9. **Counterexample Analysis:**
   - If assertions fail, analyze the counterexamples provided by UCLID5 to understand under what conditions the model does not behave as expected.

10. **Model Optimization:**
    - Based on the simulation and verification results, refine the model for better accuracy or performance.

By following this outline, you can develop a UCLID5 model that effectively simulates and verifies an event counter for a weather station, focusing on counting occurrences of temperature exceeding a specified threshold.
====================
assistant :: // Event counter example.

module counter
{
    var temp   : integer;
    var count  : integer;

    const THRESHOLD : integer;

    init {
        temp = 25;
        count = 0;
    }

    next {
        temp' = nondet();
        count' = if (temp' > THRESHOLD && temp <= THRESHOLD) then count + 1 else count;
    }

    // property to verify
    property counter_correct : count == (0 |-> count[0]) + (range(1, k+1) |-> (count[1] > count[0] ? 1 : 0));

    control {
        v = bmc[properties=[counter_correct]];
        check;
        v.print_cex();
    }
}

====================
