system :: You're an expert in writing uclid5 models.You will be given a docstring and asked to write a model. Remember uclid5 is a state machine language and has it's own specific syntax.
====================
user :: Write a uclid5 model for the following description:
    This UCLID5 model simulates a process interaction environment to evaluate confidentiality properties through non-interference simulations, inspired by an example in Chapter 17 on Security from "Introduction to Embedded Systems" by Lee & Seshia. The model consists of two types of process modules (`process1` and `process2`) and a main module that orchestrates the interaction between instances of these processes.

    Process Modules:
    1. `process1`: This module captures a simplified process that reflects non-deterministic behavior based on public input. It uses an enumerated type `pc_t` with a single state `A`. It has:
        - Inputs:
        * `s`: A boolean representing a secret input.
        * `x`: A boolean representing a public input.
        - Output:
        * `z`: A boolean public output that toggles based on the inverse of input `x`.
        - Behavior:
        * The process starts in state `A` and outputs `z` as `false` initially.
        * In subsequent cycles, the output `z` becomes the negation of `x`.

    2. `process2`: This module is a more complex process with an internal state machine described using state enum `pc_t` with states `B` and `C`. It demonstrates state-dependent output behavior.
        - Inputs are the same as in `process1`.
        - Output and state transitions:
        * The process starts in state `B` with the output `z` as `false`.
        * Based on the input combination (state, `s`, and `x`), the process transitions between states `B` and `C`, toggling the output `z`.
        * The transitions are specifically:
            - From `B` to `C` (output `z` is set to `true`) when `s` is true and `x` is false.
            - From `C` back to `B` (output `z` is reset to `false`) under the same input conditions.

    Main Module:
    - Sets up instances of `process2` (`p21` and `p22`) to interact under controlled input conditions.
    - Inputs `x1`, `x2` (public), and `s1`, `s2` (secret) are used for driving the process instances.
    - Controls non-determinism by initially assuming both `x1` and `x2` are equal, and it maintains this assumption in all subsequent states.
    - Evaluates confidentiality by asserting the invariant `same_output_z`, ensuring that outputs `z1` and `z2` of both process instances are always equal, thereby checking for consistent behavior across different runs with potentially varying secret inputs.

    Control:
    - The control block is used to perform bounded model checking and to produce counterexamples. It specifies that up to 5 unrolling should be checked.
    - The `print_cex` function is used for displaying counterexamples for the states of inputs and outputs along with the internal state of `process2` instances (`p21` and `p22`).

    This model is particularly useful for demonstrating the effects of secret data manipulations on the outputs, which can be analyzed to study security vulnerability or proof of non-interference in systems.

====================
assistant :: module process1
    {
    type pc_t = enum { A };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    init {
        pc = A;
        z = false;
    }

    next {
        z' = !x;
    }

    }

    module process2
    {
    type pc_t = enum { B, C };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    procedure next_state()
        modifies z;
        modifies pc;
    {
        case
        (pc == B) && s && !x : { pc = C; z = true; }
        (pc == C) && s && !x : { pc = B; z = false; }
        esac
    }

    init {
        pc = B;
        z = false;
    }

    next {
        call next_state();
    }
    }


    module main
    {
    type t1pc_t = process1.pc_t;
    type t2pc_t = process2.pc_t;

    var x1,x2 : boolean;
    var s1,s2 : boolean;
    var z1,z2 : boolean;

    /*
    instance p11 : process1(z: (z1), s : (s1), x : (x1));
    instance p12 : process1(z: (z2), s : (s2), x : (x2));
    */

    /*
    */
    instance p21 : process2(z: (z1), s : (s1), x : (x1));
    instance p22 : process2(z: (z2), s : (s2), x : (x2));

    init {
        havoc x1; havoc x2;
        havoc s1; havoc s2;
        assume(x1 == x2);
    }

    next {
        havoc x1; havoc x2;
        havoc s1; havoc s2;
        assume(x1' == x2');
        // next(p11); next(p12);
        next(p21); next(p22);
    }

    invariant same_output_z : (z1 == z2);


    control {
        // *** BASIC ASSERTIONS/INVARIANT
    /*
    */
        v = unroll(5);
        check;
        print_results;
        //v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
        v.print_cex(x1,x2,s1,s2,z1,z2,p21.pc,p22.pc);

    /*
        // *** INDUCTION
        v = induction(1);
        check;
        print_results;
        v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
    */
    }
    }
====================
user :: Write a uclid5 model for the following description:
To model the concurrent program described, where three processes (`Inc`, `Dec`, and `Reset`) operate on a shared integer variable `x`, we need to outline the Uclid5 model that defines these processes, their interaction, and the invariant to ensure `x` remains within the specified bounds. Here's how you can structure the UCLID5 model:

--OUTLINE--

1. **Model Setup**
   - Define the shared variable `x` which is accessible and modifiable by all three processes.
   - Initialize `x` with a non-deterministic value within the range [0, 200] to model arbitrary initial conditions.

2. **Process Definitions**
   - **Inc Process**:
     - Loop indefinitely checking the condition `x < 200`.
     - If the condition is true, increment `x` by 1.
   - **Dec Process**:
     - Loop indefinitely checking the condition `x > 0`.
     - If the condition is true, decrement `x` by 1.
   - **Reset Process**:
     - Loop indefinitely checking the condition `x == 200`.
     - If the condition is true, reset `x` to 0.

3. **Concurrency Model**
   - Use non-deterministic choice or interleaving semantics to model the concurrent execution of `Inc`, `Dec`, and `Reset`.
   - This can be achieved by defining a scheduler that non-deterministically selects which process to execute at each step.

4. **Safety Property (Invariant)**
   - Define an invariant that checks if the value of `x` is always between 0 and 200 (inclusive).
   - This invariant must hold true in all reachable states of the model.

5. **Model Checking**
   - Use bounded model checking to verify the invariant.
   - Set up assertions to check the invariant at each state transition.

6. **Counterexample and Trace Generation**
   - If the model checker finds a violation of the invariant, generate a counterexample trace.
   - This trace will help in understanding under what sequence of operations by the processes the invariant was violated.

--UCLID5 Code Sketch--

```uclid
module main {
    var x : integer;

    init {
        x = choose i : integer :: i >= 0 && i <= 200;
    }

    // Define the process Inc
    procedure Inc() {
        while (true) {
            if (x < 200) {
                x := x + 1;
            }
        }
    }

    // Define the process Dec
    procedure Dec() {
        while (true) {
            if (x > 0) {
                x := x - 1;
            }
        }
    }

    // Define the process Reset
    procedure Reset() {
        while (true) {
            if (x == 200) {
                x := 0;
            }
        }
    }

    // Non-deterministic scheduler
    procedure Scheduler() {
        while (true) {
            choose {
                call Inc();
                call Dec();
                call Reset();
            }
        }
    }

    // Invariant
    invariant x >= 0 && x <= 200;

    // Main control block
    control {
        Scheduler();
    }
}
```

This outline and code sketch provide a basis for modeling the described concurrent system in UCLID5. Adjustments may be needed based on specific requirements or additional constraints in the system's behavior.
====================
assistant :: module main {
    var x : integer;

    init {
        x = choose i : integer :: i >= 0 && i <= 200;
    }

    // Define the process Inc
    procedure Inc() {
        while (true) {
            if (x < 200) {
                x := x + 1;
            }
        }
    }

    // Define the process Dec
    procedure Dec() {
        while (true) {
            if (x > 0) {
                x := x - 1;
            }
        }
    }

    // Define the process Reset
    procedure Reset() {
        while (true) {
            if (x == 200) {
                x := 0;
            }
        }
    }

    // Non-deterministic scheduler
    procedure Scheduler() {
        while (true) {
            choose {
                call Inc();
                call Dec();
                call Reset();
            }
        }
    }

    // Invariant
    invariant x >= 0 && x <= 200;

    // Main control block
    control {
        check;
        print_cex;
    }
}

====================
