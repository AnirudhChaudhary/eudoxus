system :: You're an expert in writing uclid5 models.You will be given a docstring and asked to write a model. Remember uclid5 is a state machine language and has it's own specific syntax.
====================
user :: Write a uclid5 model for the following description:
    This UCLID5 model simulates a process interaction environment to evaluate confidentiality properties through non-interference simulations, inspired by an example in Chapter 17 on Security from "Introduction to Embedded Systems" by Lee & Seshia. The model consists of two types of process modules (`process1` and `process2`) and a main module that orchestrates the interaction between instances of these processes.

    Process Modules:
    1. `process1`: This module captures a simplified process that reflects non-deterministic behavior based on public input. It uses an enumerated type `pc_t` with a single state `A`. It has:
        - Inputs:
        * `s`: A boolean representing a secret input.
        * `x`: A boolean representing a public input.
        - Output:
        * `z`: A boolean public output that toggles based on the inverse of input `x`.
        - Behavior:
        * The process starts in state `A` and outputs `z` as `false` initially.
        * In subsequent cycles, the output `z` becomes the negation of `x`.

    2. `process2`: This module is a more complex process with an internal state machine described using state enum `pc_t` with states `B` and `C`. It demonstrates state-dependent output behavior.
        - Inputs are the same as in `process1`.
        - Output and state transitions:
        * The process starts in state `B` with the output `z` as `false`.
        * Based on the input combination (state, `s`, and `x`), the process transitions between states `B` and `C`, toggling the output `z`.
        * The transitions are specifically:
            - From `B` to `C` (output `z` is set to `true`) when `s` is true and `x` is false.
            - From `C` back to `B` (output `z` is reset to `false`) under the same input conditions.

    Main Module:
    - Sets up instances of `process2` (`p21` and `p22`) to interact under controlled input conditions.
    - Inputs `x1`, `x2` (public), and `s1`, `s2` (secret) are used for driving the process instances.
    - Controls non-determinism by initially assuming both `x1` and `x2` are equal, and it maintains this assumption in all subsequent states.
    - Evaluates confidentiality by asserting the invariant `same_output_z`, ensuring that outputs `z1` and `z2` of both process instances are always equal, thereby checking for consistent behavior across different runs with potentially varying secret inputs.

    Control:
    - The control block is used to perform bounded model checking and to produce counterexamples. It specifies that up to 5 unrolling should be checked.
    - The `print_cex` function is used for displaying counterexamples for the states of inputs and outputs along with the internal state of `process2` instances (`p21` and `p22`).

    This model is particularly useful for demonstrating the effects of secret data manipulations on the outputs, which can be analyzed to study security vulnerability or proof of non-interference in systems.

====================
assistant :: module process1
    {
    type pc_t = enum { A };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    init {
        pc = A;
        z = false;
    }

    next {
        z' = !x;
    }

    }

    module process2
    {
    type pc_t = enum { B, C };

    var pc : pc_t;
    input s : boolean; // secret input
    input x : boolean; // public input
    output z: boolean; // public output

    procedure next_state()
        modifies z;
        modifies pc;
    {
        case
        (pc == B) && s && !x : { pc = C; z = true; }
        (pc == C) && s && !x : { pc = B; z = false; }
        esac
    }

    init {
        pc = B;
        z = false;
    }

    next {
        call next_state();
    }
    }


    module main
    {
    type t1pc_t = process1.pc_t;
    type t2pc_t = process2.pc_t;

    var x1,x2 : boolean;
    var s1,s2 : boolean;
    var z1,z2 : boolean;

    /*
    instance p11 : process1(z: (z1), s : (s1), x : (x1));
    instance p12 : process1(z: (z2), s : (s2), x : (x2));
    */

    /*
    */
    instance p21 : process2(z: (z1), s : (s1), x : (x1));
    instance p22 : process2(z: (z2), s : (s2), x : (x2));

    init {
        havoc x1; havoc x2;
        havoc s1; havoc s2;
        assume(x1 == x2);
    }

    next {
        havoc x1; havoc x2;
        havoc s1; havoc s2;
        assume(x1' == x2');
        // next(p11); next(p12);
        next(p21); next(p22);
    }

    invariant same_output_z : (z1 == z2);


    control {
        // *** BASIC ASSERTIONS/INVARIANT
    /*
    */
        v = unroll(5);
        check;
        print_results;
        //v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
        v.print_cex(x1,x2,s1,s2,z1,z2,p21.pc,p22.pc);

    /*
        // *** INDUCTION
        v = induction(1);
        check;
        print_results;
        v.print_cex(x1,x2,s1,s2,z1,z2,p11.pc,p12.pc);
    */
    }
    }
====================
user :: Write a uclid5 model for the following description:
Here is an outline for creating a UCLID5 model to simulate and verify a traffic light system with the three usual phases: red, green, and yellow. This outline includes the definition of states, transitions, and the assertion to ensure safety properties.

--OUTLINE--

### Model Description
The model simulates a traffic light with three phases: red, green, and yellow. The primary safety property to verify is that every red phase is immediately preceded by a yellow phase.

### Variables
- `state`: An enumerated type representing the traffic light state, with values `RED`, `GREEN`, and `YELLOW`.
- `prev_state`: An auxiliary variable used to store the previous state of the traffic light. This helps in checking the transition conditions.

### State Transition System
1. **Initial State**
   - The traffic light initially starts in the `RED` state.
   - `prev_state` is also initialized to `RED`.

2. **State Transitions**
   - From `RED` to `GREEN`: The light transitions from `RED` to `GREEN` directly.
   - From `GREEN` to `YELLOW`: The light transitions from `GREEN` to `YELLOW`.
   - From `YELLOW` to `RED`: The light transitions from `YELLOW` to `RED`.

### Safety Property Assertion
- **Immediate Precedence of Yellow before Red**:
  - Assert that if the current state is `RED`, then `prev_state` must be `YELLOW`.

### UCLID5 Model Components

1. **Type Definitions**
   - Define an enumerated type for the traffic light states.
     ```uclid
     type state_t = enum { RED, GREEN, YELLOW };
     ```

2. **State Variables**
   - Declare the `state` and `prev_state` variables.
     ```uclid
     var state : state_t;
     var prev_state : state_t;
     ```

3. **Initialization**
   - Initialize the traffic light state.
     ```uclid
     init(state) := RED;
     init(prev_state) := RED;
     ```

4. **Transition Relation**
   - Define the transition relation based on traffic light rules.
     ```uclid
     next(state) :=
       case
         state == RED -> GREEN,
         state == GREEN -> YELLOW,
         state == YELLOW -> RED,
         true -> state
       esac;
     next(prev_state) := state;
     ```

5. **Safety Property**
   - Assert the safety property regarding the transition to `RED`.
     ```uclid
     invariant enforce_yellow_before_red: (state == RED) -> (prev_state == YELLOW);
     ```

6. **Control and Verification**
   - Set up control for model checking.
     ```uclid
     control {
       // Set up the control block for model checking
       mode = simulation;
       print_cex = true; // Print counterexamples if the assertion fails
     }
     ```

This outline provides a framework for modeling the traffic light system in UCLID5, ensuring that the system adheres to the specified safety property through formal verification techniques.
====================
assistant :: // OUTLINE
// Model Description
// The model simulates a traffic light with three phases: red, green, and yellow.
// The primary safety property to verify is that every red phase is immediately preceded by a yellow phase.

// Variables
// - state: An enumerated type representing the traffic light state.
// - prev_state: An auxiliary variable used to store the previous state.

// State Transition System
// Initial State
// The traffic light starts in the RED state.
// prev_state is initialized to RED.
// State Transitions
// From RED to GREEN.
// From GREEN to YELLOW.
// From YELLOW to RED.

// Safety Property Assertion
// If the current state is RED, then the previous state must have been YELLOW.

// UCLID5 Model Components

// Type Definitions
type state_t = enum { RED, GREEN, YELLOW };

// State Variables
var state : state_t;
var prev_state : state_t;

// State Transition System
init(state) := RED;
init(prev_state) := RED;

next(state) :=
  case
    state == RED    -> GREEN,
    state == GREEN  -> YELLOW,
    state == YELLOW -> RED,
    true -> state
  esac;
next(prev_state) := state;

// Safety Property
invariant enforce_yellow_before_red: (state == RED) -> (prev_state == YELLOW);

// Control and Verification
control {
  mode = simulation;
  print_cex = true;
}

====================
