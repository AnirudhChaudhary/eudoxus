// Purpose: tests that havoc in the next block changes the value of the next state variable, not the current variable.
// Description: A simple module with 1 variable. The variable is initialised to 0. The next block havocs the variable, and then uses an inline assertion to check that the variable is still equal to 0. We use bounded model checking with an unrolling of 1 to check that this assertion passes on the first unrolling.
// Expectation: The assertion should pass
// Validation: Replace this line https://github.com/uclid-org/uclid/blob/af3b470cc3ca860a216faf75f25d8783362b6df3/src/main/scala/uclid/lang/PrimedVariableEliminator.scala#L146 with Some(HavocStmt(HavocableId(id)))
// Comment: adapted from havoc_ordering.ucl

module main
{
    var i : integer;

    init {
        i = 0;
    }

    next {
        havoc i;
        assert (i == 0);
    }

    control {
        // print_module;
        v = unroll(1);
        check;
        print_results;
    }
}
